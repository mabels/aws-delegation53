"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walkTree = exports.deleteAddNS = exports.filterNS = exports.buildZoneTree = exports.Leaf = exports.revDomains = exports.harmonizeName = void 0;
function harmonizeName(name) {
    return name
        .toLocaleLowerCase()
        .trim()
        .replace(/\.+/g, ".")
        .replace(/^\./, "") // no leading .
        .replace(/\.$/, ""); // no trailing .
}
exports.harmonizeName = harmonizeName;
function revDomains(dname) {
    const out = [];
    let d = [];
    dname
        .split(".")
        .reverse()
        .forEach((part) => {
        d = [part, ...d];
        out.push(d.join("."));
    });
    return out;
}
exports.revDomains = revDomains;
class Leaf {
    constructor() {
        this.children = new Map();
    }
    add(name, ref) {
        let found = this.children.get(name);
        if (!found) {
            found = new Leaf();
            this.children.set(name, found);
        }
        found.parent = this;
        if (ref) {
            found.ref = ref;
        }
        return found;
    }
}
exports.Leaf = Leaf;
function buildZoneTree(accounts) {
    const dnames = new Map();
    accounts.forEach((ahzs) => {
        ahzs.zones.forEach((hzi) => {
            const dname = harmonizeName(hzi.hostZone.Name);
            // console.log(`dname=${dname}:${hzi.hostZone.Name}`)
            let found = dnames.get(dname);
            if (!found) {
                found = [];
                dnames.set(dname, found);
            }
            found.push({
                name: dname,
                accountsHostedZones: ahzs,
                zone: hzi,
            });
        });
    });
    const root = new Leaf();
    dnames.forEach((ahzs, dname) => {
        if (ahzs.length != 1) {
            console.error(`The ${dname} is skipped is owned by multiple accounts: ${JSON.stringify(ahzs.map((i) => i.accountsHostedZones.account.roleArn))}`);
            return;
        }
        const ahz = ahzs[0];
        let parent = root;
        revDomains(dname).forEach((d) => {
            // console.log(`${dname} === ${d}`)
            parent = parent.add(d, dname === d ? ahz : undefined);
        });
    });
    return root;
}
exports.buildZoneTree = buildZoneTree;
function filterNS(rrss, name) {
    const ret = [];
    rrss
        .filter((i) => {
        return i.Type == "NS" && harmonizeName(i.Name) === harmonizeName(name);
    })
        .forEach((i) => {
        var _a;
        (_a = i.ResourceRecords) === null || _a === void 0 ? void 0 : _a.forEach((rrec) => {
            ret.push({
                Name: i.Name,
                Type: i.Type,
                TTL: i.TTL,
                ResourceRecord: rrec.Value,
            });
        });
    });
    return ret.sort((a, b) => {
        if (a.ResourceRecord < b.ResourceRecord) {
            return -1;
        }
        if (a.ResourceRecord > b.ResourceRecord) {
            return 1;
        }
        return 0;
    });
}
exports.filterNS = filterNS;
function deleteAddNS(n1, n2) {
    const del = [];
    const add = [];
    n1.forEach((i, idx) => {
        if (!n2[idx] || !(i.Name === n2[idx].Name &&
            i.TTL === n2[idx].TTL &&
            i.ResourceRecord === n2[idx].ResourceRecord)) {
            del.push(i);
        }
    });
    n2.forEach((i, idx) => {
        if (!n1[idx] || !(i.Name === n1[idx].Name &&
            i.TTL === n1[idx].TTL &&
            i.ResourceRecord === n1[idx].ResourceRecord)) {
            add.push(i);
        }
    });
    return { del, add };
}
exports.deleteAddNS = deleteAddNS;
async function walkTree(tree, cb) {
    return Promise.all(Array.from(tree.children.values()).map(async (v) => {
        await cb(tree, v);
        return walkTree(v, cb);
    }));
}
exports.walkTree = walkTree;
//# sourceMappingURL=data:application/json;base64,