"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHostedZones = exports.waitFor = exports.updateRecord = exports.getZoneRecords = exports.assumeRole = void 0;
const AWS = require("aws-sdk");
async function assumeRole(profile, assumeRole, session = `assumedRole_${assumeRole.replace(/[^A-Za-z0-9]/g, "_")}`) {
    return new Promise((rs, rj) => {
        let sts = new AWS.STS({
            apiVersion: "2011-06-15",
            ...profile,
        });
        sts.assumeRole({
            RoleArn: assumeRole,
            RoleSessionName: "router",
        }, (err, data) => {
            if (err) {
                rj(err);
            }
            else {
                rs(data);
            }
        });
    });
}
exports.assumeRole = assumeRole;
async function getZoneRecords(route53, hostzone) {
    return new Promise((rs, rj) => {
        const ret = [];
        function fetchAll(recordName) {
            const params = {
                HostedZoneId: hostzone.Id,
                // MaxItems: "16",
                // StartRecordIdentifier: '*',
                StartRecordName: recordName,
                StartRecordType: "NS",
            };
            route53.listResourceRecordSets(params, (err, data) => {
                if (err) {
                    rj(err);
                    return;
                }
                ret.push(...data.ResourceRecordSets);
                if (data.NextRecordName) {
                    fetchAll(data.NextRecordName);
                }
                else {
                    rs(ret);
                }
            });
        }
        fetchAll(hostzone.Name);
    });
}
exports.getZoneRecords = getZoneRecords;
async function updateRecord(route53, recordSet, zoneId, downRole, action = "UPSERT") {
    const params = {
        ChangeBatch: {
            Changes: [
                {
                    Action: action,
                    ResourceRecordSet: recordSet,
                },
            ],
            Comment: `Set the delegation for ${downRole}`,
        },
        HostedZoneId: zoneId,
    };
    return new Promise((rs, rj) => {
        route53.changeResourceRecordSets(params, function (err, data) {
            if (err) {
                rj(err);
            }
            else {
                rs(data);
            }
        });
    });
}
exports.updateRecord = updateRecord;
async function waitFor(route53, data) {
    const params = {
        Id: data.ChangeInfo.Id,
    };
    return new Promise((rs, rj) => {
        route53.waitFor("resourceRecordSetsChanged", params, (err, data) => {
            if (err) {
                rj(err);
            }
            else {
                rs(data);
            }
        });
    });
}
exports.waitFor = waitFor;
async function getHostedZones(route53) {
    const result = [];
    return new Promise(async (rs, rj) => {
        function listHostedZones(req) {
            route53.listHostedZones(req, async (err, hostzones) => {
                if (err) {
                    rj(err);
                    return;
                }
                const infos = await Promise.all(hostzones.HostedZones.map(async (hz) => {
                    return {
                        hostZone: hz,
                        recordSet: await getZoneRecords(route53, hz),
                    };
                }));
                result.push(...infos);
                if (hostzones.NextMarker && hostzones.IsTruncated) {
                    listHostedZones({
                        Marker: hostzones.NextMarker,
                    });
                }
                else {
                    rs(result);
                }
            });
        }
        listHostedZones({});
    });
}
exports.getHostedZones = getHostedZones;
//# sourceMappingURL=data:application/json;base64,