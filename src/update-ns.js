"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgConfig = void 0;
const aws_binding_1 = require("./aws-binding");
const aws_sdk_1 = require("aws-sdk");
const domain_tree_1 = require("./domain-tree");
async function getAccountsHostedZones(credentials, accounts) {
    return Promise.all(accounts.map(async (account) => {
        const assume = await aws_binding_1.assumeRole(credentials, account.roleArn);
        const route53 = new aws_sdk_1.Route53({
            secretAccessKey: assume.Credentials.SecretAccessKey,
            accessKeyId: assume.Credentials.AccessKeyId,
            sessionToken: assume.Credentials.SessionToken,
        });
        return {
            account,
            route53,
            zones: await aws_binding_1.getHostedZones(route53),
        };
    }));
}
class ArgConfig {
    // readonly srcProfile: string
    // readonly dstRoleArn: string
    constructor(args) {
        this.accounts = args.slice(2).map((i) => ({
            roleArn: i,
        }));
    }
}
exports.ArgConfig = ArgConfig;
(async (config) => {
    const credentials = new aws_sdk_1.EC2MetadataCredentials({
    // httpOptions: { timeout: 5000 }, // 5 second timeout
    // maxRetries: 10, // retry 10 times
    // retryDelayOptions: { base: 200 } // see AWS.Config for information
    });
    await credentials.getPromise();
    const ret = await getAccountsHostedZones(credentials, config.accounts);
    // console.log(
    //   config.accounts,
    //   ret.map((i) => JSON.stringify(i.zones))
    // );
    const tree = domain_tree_1.buildZoneTree(ret);
    await domain_tree_1.walkTree(tree, async (tree, v) => {
        if (tree.ref && v.ref) {
            // console.log(tree.ref!.zone.hostZone.Id, tree.ref!.zone.recordSet)
            const topNSRecs = domain_tree_1.filterNS(tree.ref.zone.recordSet, v.ref.name);
            const downNSRecs = domain_tree_1.filterNS(v.ref.zone.recordSet, v.ref.name);
            const da = domain_tree_1.deleteAddNS(topNSRecs, downNSRecs);
            // console.log(topNSRecs, downNSRecs)
            if (da.add.length) {
                const first = da.add[0];
                const nsrec = {
                    Name: first.Name,
                    Type: first.Type,
                    TTL: first.TTL,
                    ResourceRecords: downNSRecs.map((i) => ({ Value: i.ResourceRecord })),
                };
                console.log(`Add:${tree.ref.accountsHostedZones.account.roleArn}:`, nsrec);
                await aws_binding_1.updateRecord(tree.ref.accountsHostedZones.route53, nsrec, tree.ref.zone.hostZone.Id, v.ref.accountsHostedZones.account.roleArn);
            }
        }
    });
})(new ArgConfig(process.argv));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlLW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtDQU91QjtBQUN2QixxQ0FBK0Q7QUFDL0QsK0NBTXVCO0FBRXZCLEtBQUssVUFBVSxzQkFBc0IsQ0FDbkMsV0FBb0MsRUFDcEMsUUFBMEI7SUFFMUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNoQixRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUM3QixNQUFNLE1BQU0sR0FBRyxNQUFNLHdCQUFVLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUM7WUFDMUIsZUFBZSxFQUFFLE1BQU0sQ0FBQyxXQUFZLENBQUMsZUFBZTtZQUNwRCxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVksQ0FBQyxXQUFXO1lBQzVDLFlBQVksRUFBRSxNQUFNLENBQUMsV0FBWSxDQUFDLFlBQVk7U0FDL0MsQ0FBQyxDQUFDO1FBQ0gsT0FBTztZQUNMLE9BQU87WUFDUCxPQUFPO1lBQ1AsS0FBSyxFQUFFLE1BQU0sNEJBQWMsQ0FBQyxPQUFPLENBQUM7U0FDckMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBTUQsTUFBYSxTQUFTO0lBRXBCLDhCQUE4QjtJQUM5Qiw4QkFBOEI7SUFDOUIsWUFBWSxJQUFjO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEMsT0FBTyxFQUFFLENBQUM7U0FDWCxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDRjtBQVRELDhCQVNDO0FBRUQsQ0FBQyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7SUFDeEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxnQ0FBc0IsQ0FBQztJQUM3QyxzREFBc0Q7SUFDdEQsb0NBQW9DO0lBQ3BDLHFFQUFxRTtLQUN0RSxDQUFDLENBQUM7SUFDSCxNQUFNLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUUvQixNQUFNLEdBQUcsR0FBRyxNQUFNLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkUsZUFBZTtJQUNmLHFCQUFxQjtJQUNyQiw0Q0FBNEM7SUFDNUMsS0FBSztJQUVMLE1BQU0sSUFBSSxHQUFHLDJCQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsTUFBTSxzQkFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ3JCLG9FQUFvRTtZQUNwRSxNQUFNLFNBQVMsR0FBRyxzQkFBUSxDQUFDLElBQUksQ0FBQyxHQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsR0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sVUFBVSxHQUFHLHNCQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxHQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEUsTUFBTSxFQUFFLEdBQUcseUJBQVcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDOUMscUNBQXFDO1lBQ3JDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU0sS0FBSyxHQUE4QjtvQkFDdkMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO29CQUNoQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7b0JBQ2hCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztvQkFDZCxlQUFlLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztpQkFDdEUsQ0FBQztnQkFDRixPQUFPLENBQUMsR0FBRyxDQUNULE9BQU8sSUFBSSxDQUFDLEdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLEVBQ3ZELEtBQUssQ0FDTixDQUFDO2dCQUNGLE1BQU0sMEJBQVksQ0FDaEIsSUFBSSxDQUFDLEdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQ3JDLEtBQUssRUFDTCxJQUFJLENBQUMsR0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUMxQixDQUFDLENBQUMsR0FBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzNDLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFjY291bnRzSG9zdGVkWm9uZXMsXG4gIGFzc3VtZVJvbGUsXG4gIGdldEhvc3RlZFpvbmVzLFxuICBBY2NvdW50c0hvc3RlZFpvbmUsXG4gIHVwZGF0ZVJlY29yZCxcbiAgUm91dGU1M0FjY291bnQsXG59IGZyb20gXCIuL2F3cy1iaW5kaW5nXCI7XG5pbXBvcnQgeyBSb3V0ZTUzLCBTVFMsIEVDMk1ldGFkYXRhQ3JlZGVudGlhbHMgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHtcbiAgaGFybW9uaXplTmFtZSxcbiAgYnVpbGRab25lVHJlZSxcbiAgd2Fsa1RyZWUsXG4gIGZpbHRlck5TLFxuICBkZWxldGVBZGROUyxcbn0gZnJvbSBcIi4vZG9tYWluLXRyZWVcIjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudHNIb3N0ZWRab25lcyhcbiAgY3JlZGVudGlhbHM6IFNUUy5DbGllbnRDb25maWd1cmF0aW9uLFxuICBhY2NvdW50czogUm91dGU1M0FjY291bnRbXVxuKTogUHJvbWlzZTxBY2NvdW50c0hvc3RlZFpvbmVzW10+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGFjY291bnRzLm1hcChhc3luYyAoYWNjb3VudCkgPT4ge1xuICAgICAgY29uc3QgYXNzdW1lID0gYXdhaXQgYXNzdW1lUm9sZShjcmVkZW50aWFscywgYWNjb3VudC5yb2xlQXJuKTtcbiAgICAgIGNvbnN0IHJvdXRlNTMgPSBuZXcgUm91dGU1Myh7XG4gICAgICAgIHNlY3JldEFjY2Vzc0tleTogYXNzdW1lLkNyZWRlbnRpYWxzIS5TZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgIGFjY2Vzc0tleUlkOiBhc3N1bWUuQ3JlZGVudGlhbHMhLkFjY2Vzc0tleUlkLFxuICAgICAgICBzZXNzaW9uVG9rZW46IGFzc3VtZS5DcmVkZW50aWFscyEuU2Vzc2lvblRva2VuLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY2NvdW50LFxuICAgICAgICByb3V0ZTUzLFxuICAgICAgICB6b25lczogYXdhaXQgZ2V0SG9zdGVkWm9uZXMocm91dGU1MyksXG4gICAgICB9O1xuICAgIH0pXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgcmVhZG9ubHkgYWNjb3VudHM6IFJvdXRlNTNBY2NvdW50W107XG59XG5cbmV4cG9ydCBjbGFzcyBBcmdDb25maWcgaW1wbGVtZW50cyBDb25maWcge1xuICByZWFkb25seSBhY2NvdW50czogUm91dGU1M0FjY291bnRbXTtcbiAgLy8gcmVhZG9ubHkgc3JjUHJvZmlsZTogc3RyaW5nXG4gIC8vIHJlYWRvbmx5IGRzdFJvbGVBcm46IHN0cmluZ1xuICBjb25zdHJ1Y3RvcihhcmdzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWNjb3VudHMgPSBhcmdzLnNsaWNlKDIpLm1hcCgoaSkgPT4gKHtcbiAgICAgIHJvbGVBcm46IGksXG4gICAgfSkpO1xuICB9XG59XG5cbihhc3luYyAoY29uZmlnOiBDb25maWcpID0+IHtcbiAgY29uc3QgY3JlZGVudGlhbHMgPSBuZXcgRUMyTWV0YWRhdGFDcmVkZW50aWFscyh7XG4gICAgLy8gaHR0cE9wdGlvbnM6IHsgdGltZW91dDogNTAwMCB9LCAvLyA1IHNlY29uZCB0aW1lb3V0XG4gICAgLy8gbWF4UmV0cmllczogMTAsIC8vIHJldHJ5IDEwIHRpbWVzXG4gICAgLy8gcmV0cnlEZWxheU9wdGlvbnM6IHsgYmFzZTogMjAwIH0gLy8gc2VlIEFXUy5Db25maWcgZm9yIGluZm9ybWF0aW9uXG4gIH0pO1xuICBhd2FpdCBjcmVkZW50aWFscy5nZXRQcm9taXNlKCk7XG5cbiAgY29uc3QgcmV0ID0gYXdhaXQgZ2V0QWNjb3VudHNIb3N0ZWRab25lcyhjcmVkZW50aWFscywgY29uZmlnLmFjY291bnRzKTtcbiAgLy8gY29uc29sZS5sb2coXG4gIC8vICAgY29uZmlnLmFjY291bnRzLFxuICAvLyAgIHJldC5tYXAoKGkpID0+IEpTT04uc3RyaW5naWZ5KGkuem9uZXMpKVxuICAvLyApO1xuXG4gIGNvbnN0IHRyZWUgPSBidWlsZFpvbmVUcmVlKHJldCk7XG5cbiAgYXdhaXQgd2Fsa1RyZWUodHJlZSwgYXN5bmMgKHRyZWUsIHYpID0+IHtcbiAgICBpZiAodHJlZS5yZWYgJiYgdi5yZWYpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRyZWUucmVmIS56b25lLmhvc3Rab25lLklkLCB0cmVlLnJlZiEuem9uZS5yZWNvcmRTZXQpXG4gICAgICBjb25zdCB0b3BOU1JlY3MgPSBmaWx0ZXJOUyh0cmVlLnJlZiEuem9uZS5yZWNvcmRTZXQsIHYucmVmIS5uYW1lKTtcbiAgICAgIGNvbnN0IGRvd25OU1JlY3MgPSBmaWx0ZXJOUyh2LnJlZiEuem9uZS5yZWNvcmRTZXQsIHYucmVmIS5uYW1lKTtcbiAgICAgIGNvbnN0IGRhID0gZGVsZXRlQWRkTlModG9wTlNSZWNzLCBkb3duTlNSZWNzKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRvcE5TUmVjcywgZG93bk5TUmVjcylcbiAgICAgIGlmIChkYS5hZGQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gZGEuYWRkWzBdO1xuICAgICAgICBjb25zdCBuc3JlYzogUm91dGU1My5SZXNvdXJjZVJlY29yZFNldCA9IHtcbiAgICAgICAgICBOYW1lOiBmaXJzdC5OYW1lLFxuICAgICAgICAgIFR5cGU6IGZpcnN0LlR5cGUsXG4gICAgICAgICAgVFRMOiBmaXJzdC5UVEwsXG4gICAgICAgICAgUmVzb3VyY2VSZWNvcmRzOiBkb3duTlNSZWNzLm1hcCgoaSkgPT4gKHsgVmFsdWU6IGkuUmVzb3VyY2VSZWNvcmQgfSkpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgQWRkOiR7dHJlZS5yZWYhLmFjY291bnRzSG9zdGVkWm9uZXMuYWNjb3VudC5yb2xlQXJufTpgLFxuICAgICAgICAgIG5zcmVjXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IHVwZGF0ZVJlY29yZChcbiAgICAgICAgICB0cmVlLnJlZiEuYWNjb3VudHNIb3N0ZWRab25lcy5yb3V0ZTUzLFxuICAgICAgICAgIG5zcmVjLFxuICAgICAgICAgIHRyZWUucmVmIS56b25lLmhvc3Rab25lLklkLFxuICAgICAgICAgIHYucmVmIS5hY2NvdW50c0hvc3RlZFpvbmVzLmFjY291bnQucm9sZUFyblxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbn0pKG5ldyBBcmdDb25maWcocHJvY2Vzcy5hcmd2KSk7XG4iXX0=