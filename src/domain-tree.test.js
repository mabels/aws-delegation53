"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const domain_tree_1 = require("./domain-tree");
test("harmonizeName", () => {
    expect(domain_tree_1.harmonizeName("")).toBe("");
    expect(domain_tree_1.harmonizeName(".")).toBe("");
    expect(domain_tree_1.harmonizeName("bla")).toBe("bla");
    expect(domain_tree_1.harmonizeName(".bla.")).toBe("bla");
    expect(domain_tree_1.harmonizeName("bli.bla")).toBe("bli.bla");
    expect(domain_tree_1.harmonizeName("bli.bla.")).toBe("bli.bla");
    expect(domain_tree_1.harmonizeName("bli...bla...")).toBe("bli.bla");
    expect(domain_tree_1.harmonizeName("Bli...Bla...")).toBe("bli.bla");
    expect(domain_tree_1.harmonizeName("   Bli...Bla...\n")).toBe("bli.bla");
    expect(domain_tree_1.harmonizeName("   ....Bli...Bla...\n")).toBe("bli.bla");
});
test("revDomains", () => {
    expect(domain_tree_1.revDomains("")).toEqual([""]);
    expect(domain_tree_1.revDomains("bla")).toEqual(["bla"]);
    expect(domain_tree_1.revDomains("bli.bla")).toEqual(["bla", "bli.bla"]);
    expect(domain_tree_1.revDomains("blub.bli.bla")).toEqual([
        "bla",
        "bli.bla",
        "blub.bli.bla",
    ]);
});
test("Leaf", () => {
    var _a, _b, _c;
    const l = new domain_tree_1.Leaf();
    expect(l.children instanceof Map).toBeTruthy();
    expect(l.parent).toBeFalsy();
    expect(l.ref).toBeFalsy();
    l.add("bla", "XXX");
    expect(l.children.size).toBe(1);
    expect((_a = l.children.get("bla")) === null || _a === void 0 ? void 0 : _a.ref).toBe("XXX");
    l.add("bla", "YYY");
    expect(l.children.size).toBe(1);
    expect((_b = l.children.get("bla")) === null || _b === void 0 ? void 0 : _b.ref).toBe("YYY");
    l.add("bli", "YYY");
    expect(l.children.size).toBe(2);
    expect((_c = l.children.get("bli")) === null || _c === void 0 ? void 0 : _c.ref).toBe("YYY");
});
// export function buildZoneTree(accounts: AccountsHostedZones[]) {
//   const dnames = new Map<string, AccountsHostedZone[]>();
//   accounts.forEach((ahzs) => {
//     ahzs.zones.forEach((hzi) => {
//       const dname = harmonizeName(hzi.hostZone.Name);
//       // console.log(`dname=${dname}:${hzi.hostZone.Name}`)
//       let found = dnames.get(dname);
//       if (!found) {
//         found = [];
//         dnames.set(dname, found);
//       }
//       found.push({
//         name: dname,
//         accountsHostedZones: ahzs,
//         zone: hzi,
//       });
//     });
//   });
//   const root = new Leaf();
//   dnames.forEach((ahzs, dname) => {
//     if (ahzs.length != 1) {
//       console.error(
//         `The ${dname} is skipped is owned by multiple accounts: ${JSON.stringify(
//           ahzs.map((i) => i.accountsHostedZones.account.roleArn)
//         )}`
//       );
//       return;
//     }
//     const ahz = ahzs[0];
//     let parent = root;
//     revDomains(dname).forEach((d) => {
//       // console.log(`${dname} === ${d}`)
//       parent = parent.add(d, dname === d ? ahz : undefined);
//     });
//   });
//   return root;
// }
// interface ResourceRecord {
//   Name: string;
//   Type: string;
//   TTL?: number;
//   ResourceRecord: string;
// }
test("filterNS", () => {
    const my = domain_tree_1.filterNS([
        {
            Name: "blx",
            Type: "NS",
        },
        {
            Name: "bla",
            Type: "NS",
            ResourceRecords: [{ Value: "zzz" }, { Value: "yyy" }],
        },
        {
            Name: "bla",
            Type: "NS",
            ResourceRecords: [{ Value: "bbb" }, { Value: "aaa" }],
        },
    ], "bla");
    expect(my).toEqual([
        {
            Name: "bla",
            ResourceRecord: "aaa",
            TTL: undefined,
            Type: "NS",
        },
        {
            Name: "bla",
            ResourceRecord: "bbb",
            TTL: undefined,
            Type: "NS",
        },
        {
            Name: "bla",
            ResourceRecord: "yyy",
            TTL: undefined,
            Type: "NS",
        },
        {
            Name: "bla",
            ResourceRecord: "zzz",
            TTL: undefined,
            Type: "NS",
        },
    ]);
});
test("deleteAddNS", () => {
    let da = domain_tree_1.deleteAddNS([], []);
    expect(da.add).toEqual([]);
    expect(da.del).toEqual([]);
    da = domain_tree_1.deleteAddNS([], [{ Name: "x", Type: "NS", ResourceRecord: "x" }]);
    expect(da.add).toEqual([{ Name: "x", Type: "NS", ResourceRecord: "x" }]);
    expect(da.del).toEqual([]);
    da = domain_tree_1.deleteAddNS([{ Name: "x", Type: "NS", ResourceRecord: "x" }], [{ Name: "x", Type: "NS", ResourceRecord: "x" }]);
    expect(da.add).toEqual([]);
    expect(da.del).toEqual([]);
    da = domain_tree_1.deleteAddNS([{ Name: "x", Type: "NS", ResourceRecord: "y" }], [{ Name: "x", Type: "NS", ResourceRecord: "x" }]);
    expect(da.add).toEqual([
        {
            Name: "x",
            ResourceRecord: "x",
            Type: "NS",
        },
    ]);
    expect(da.del).toEqual([
        {
            Name: "x",
            ResourceRecord: "y",
            Type: "NS",
        },
    ]);
});
function accountsHostedZones(name) {
    return {
        account: { roleArn: name },
        route53: {},
        zones: [{
                hostZone: {
                    Id: name,
                    Name: name,
                    CallerReference: name
                },
                recordSet: []
            }]
    };
}
test("buildZoneTree", async () => {
    const empty = domain_tree_1.buildZoneTree([]);
    expect(empty.children.size).toBe(0);
    // const top = tree.add("top", "top");
    // const topTop1 = top.add("top.top1", "top.top1");
    // const topTop2 = top.add("top.top2", "top.top2");
    // topTop1.add("top.top1.top1", "top.top1.top1");
    // topTop2.add("top.top2.top2", "top.top2.top2");
    // tree.add("top1", "top1").add("top1.top1", "top1.top1")
    const tree = domain_tree_1.buildZoneTree([
        accountsHostedZones("top.top1"),
        accountsHostedZones("top.top2"),
        accountsHostedZones("top.top1.top1"),
        accountsHostedZones("top.top2.top2"),
        accountsHostedZones("x.y.top2"),
        accountsHostedZones("top"),
        accountsHostedZones("top1.top1"),
        accountsHostedZones("top1")
    ]);
    const out = [];
    await domain_tree_1.walkTree(tree, async (_, d) => {
        out.push(d);
    });
    expect(out.map(i => { var _a; return (_a = i.ref) === null || _a === void 0 ? void 0 : _a.name; })).toEqual([
        "top1",
        undefined,
        "top",
        "top.top1",
        "top1.top1",
        "top.top2",
        undefined,
        undefined,
        "top.top1.top1",
        "top.top2.top2",
        "x.y.top2"
    ]);
});
//# sourceMappingURL=data:application/json;base64,